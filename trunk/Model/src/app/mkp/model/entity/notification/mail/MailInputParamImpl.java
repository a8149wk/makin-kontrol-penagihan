package app.mkp.model.entity.notification.mail;

import oracle.jbo.AttributeList;
import oracle.jbo.Key;
import oracle.jbo.domain.DBSequence;
import oracle.jbo.domain.Number;
import oracle.jbo.server.AttributeDefImpl;
import oracle.jbo.server.EntityDefImpl;
import oracle.jbo.server.EntityImpl;
import oracle.jbo.server.SequenceImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Fri Jun 14 16:28:28 ICT 2013
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class MailInputParamImpl extends EntityImpl {
    private static EntityDefImpl mDefinitionObject;

    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. DO NOT MODIFY.
     */
    public enum AttributesEnum {
        Id {
            public Object get(MailInputParamImpl obj) {
                return obj.getId();
            }

            public void put(MailInputParamImpl obj, Object value) {
                obj.setId((DBSequence)value);
            }
        }
        ,
        InputNm {
            public Object get(MailInputParamImpl obj) {
                return obj.getInputNm();
            }

            public void put(MailInputParamImpl obj, Object value) {
                obj.setInputNm((String)value);
            }
        }
        ,
        MailId {
            public Object get(MailInputParamImpl obj) {
                return obj.getMailId();
            }

            public void put(MailInputParamImpl obj, Object value) {
                obj.setMailId((Number)value);
            }
        }
        ,
        MailTemplate {
            public Object get(MailInputParamImpl obj) {
                return obj.getMailTemplate();
            }

            public void put(MailInputParamImpl obj, Object value) {
                obj.setMailTemplate((MailTemplateImpl)value);
            }
        }
        ;
        private static AttributesEnum[] vals = null;
        private static final int firstIndex = 0;

        public abstract Object get(MailInputParamImpl object);

        public abstract void put(MailInputParamImpl object, Object value);

        public int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        public static final int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        public static final AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }


    public static final int ID = AttributesEnum.Id.index();
    public static final int INPUTNM = AttributesEnum.InputNm.index();
    public static final int MAILID = AttributesEnum.MailId.index();
    public static final int MAILTEMPLATE = AttributesEnum.MailTemplate.index();

    /**
     * This is the default constructor (do not remove).
     */
    public MailInputParamImpl() {
    }


    /**
     * @return the definition object for this instance class.
     */
    public static synchronized EntityDefImpl getDefinitionObject() {
        if (mDefinitionObject == null) {
            mDefinitionObject = EntityDefImpl.findDefObject("app.mkp.model.entity.notification.mail.MailInputParam");
        }
        return mDefinitionObject;
    }

    /**
     * Gets the attribute value for Id, using the alias name Id.
     * @return the Id
     */
    public DBSequence getId() {
        return (DBSequence)getAttributeInternal(ID);
    }

    /**
     * Sets <code>value</code> as the attribute value for Id.
     * @param value value to set the Id
     */
    public void setId(DBSequence value) {
        setAttributeInternal(ID, value);
    }

    /**
     * Gets the attribute value for InputNm, using the alias name InputNm.
     * @return the InputNm
     */
    public String getInputNm() {
        return (String)getAttributeInternal(INPUTNM);
    }

    /**
     * Sets <code>value</code> as the attribute value for InputNm.
     * @param value value to set the InputNm
     */
    public void setInputNm(String value) {
        setAttributeInternal(INPUTNM, value);
    }

    /**
     * Gets the attribute value for MailId, using the alias name MailId.
     * @return the MailId
     */
    public Number getMailId() {
        return (Number)getAttributeInternal(MAILID);
    }

    /**
     * Sets <code>value</code> as the attribute value for MailId.
     * @param value value to set the MailId
     */
    public void setMailId(Number value) {
        setAttributeInternal(MAILID, value);
    }

    /**
     * getAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param attrDef the attribute

     * @return the attribute value
     * @throws Exception
     */
    protected Object getAttrInvokeAccessor(int index,
                                           AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            return AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].get(this);
        }
        return super.getAttrInvokeAccessor(index, attrDef);
    }

    /**
     * setAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param value the value to assign to the attribute
     * @param attrDef the attribute

     * @throws Exception
     */
    protected void setAttrInvokeAccessor(int index, Object value,
                                         AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].put(this, value);
            return;
        }
        super.setAttrInvokeAccessor(index, value, attrDef);
    }


    /**
     * @return the associated entity MailTemplateImpl.
     */
    public MailTemplateImpl getMailTemplate() {
        return (MailTemplateImpl)getAttributeInternal(MAILTEMPLATE);
    }

    /**
     * Sets <code>value</code> as the associated entity MailTemplateImpl.
     */
    public void setMailTemplate(MailTemplateImpl value) {
        setAttributeInternal(MAILTEMPLATE, value);
    }


    /**
     * @param id key constituent

     * @return a Key object based on given key constituents.
     */
    public static Key createPrimaryKey(DBSequence id) {
        return new Key(new Object[]{id});
    }

    /**
     * Add attribute defaulting logic in this method.
     * @param attributeList list of attribute names/values to initialize the row
     */
     protected void create(AttributeList attributeList) {
             super.create(attributeList);
             SequenceImpl seq = new SequenceImpl("MAIL_INPUT_PARAM_SEQ", getDBTransaction());
             this.setId(new DBSequence(seq.getSequenceNumber()));
     }
}
