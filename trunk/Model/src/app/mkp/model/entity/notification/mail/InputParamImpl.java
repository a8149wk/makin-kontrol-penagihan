package app.mkp.model.entity.notification.mail;

import oracle.jbo.AttributeList;
import oracle.jbo.Key;
import oracle.jbo.domain.DBSequence;
import oracle.jbo.server.AttributeDefImpl;
import oracle.jbo.server.EntityDefImpl;
import oracle.jbo.server.EntityImpl;
import oracle.jbo.server.SequenceImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Mon Jul 15 15:01:48 ICT 2013
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class InputParamImpl extends EntityImpl {
    private static EntityDefImpl mDefinitionObject;

    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. DO NOT MODIFY.
     */
    public enum AttributesEnum {
        ParamId {
            public Object get(InputParamImpl obj) {
                return obj.getParamId();
            }

            public void put(InputParamImpl obj, Object value) {
                obj.setParamId((String)value);
            }
        }
        ,
        ParamNm {
            public Object get(InputParamImpl obj) {
                return obj.getParamNm();
            }

            public void put(InputParamImpl obj, Object value) {
                obj.setParamNm((String)value);
            }
        }
        ,
        Descr {
            public Object get(InputParamImpl obj) {
                return obj.getDescr();
            }

            public void put(InputParamImpl obj, Object value) {
                obj.setDescr((String)value);
            }
        }
        ,
        ParamGrp {
            public Object get(InputParamImpl obj) {
                return obj.getParamGrp();
            }

            public void put(InputParamImpl obj, Object value) {
                obj.setParamGrp((String)value);
            }
        }
        ,
        FlgActive {
            public Object get(InputParamImpl obj) {
                return obj.getFlgActive();
            }

            public void put(InputParamImpl obj, Object value) {
                obj.setFlgActive((String)value);
            }
        }
        ;
        private static AttributesEnum[] vals = null;
        private static final int firstIndex = 0;

        public abstract Object get(InputParamImpl object);

        public abstract void put(InputParamImpl object, Object value);

        public int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        public static final int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        public static final AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }
    public static final int PARAMID = AttributesEnum.ParamId.index();
    public static final int PARAMNM = AttributesEnum.ParamNm.index();
    public static final int DESCR = AttributesEnum.Descr.index();
    public static final int PARAMGRP = AttributesEnum.ParamGrp.index();
    public static final int FLGACTIVE = AttributesEnum.FlgActive.index();

    /**
     * This is the default constructor (do not remove).
     */
    public InputParamImpl() {
    }

    /**
     * Gets the attribute value for ParamId, using the alias name ParamId.
     * @return the ParamId
     */
    public String getParamId() {
        return (String)getAttributeInternal(PARAMID);
    }

    /**
     * Sets <code>value</code> as the attribute value for ParamId.
     * @param value value to set the ParamId
     */
    public void setParamId(String value) {
        setAttributeInternal(PARAMID, value);
    }

    /**
     * Gets the attribute value for ParamNm, using the alias name ParamNm.
     * @return the ParamNm
     */
    public String getParamNm() {
        return (String)getAttributeInternal(PARAMNM);
    }

    /**
     * Sets <code>value</code> as the attribute value for ParamNm.
     * @param value value to set the ParamNm
     */
    public void setParamNm(String value) {
        setAttributeInternal(PARAMNM, value);
    }

    /**
     * Gets the attribute value for Descr, using the alias name Descr.
     * @return the Descr
     */
    public String getDescr() {
        return (String)getAttributeInternal(DESCR);
    }

    /**
     * Sets <code>value</code> as the attribute value for Descr.
     * @param value value to set the Descr
     */
    public void setDescr(String value) {
        setAttributeInternal(DESCR, value);
    }

    /**
     * Gets the attribute value for ParamGrp, using the alias name ParamGrp.
     * @return the ParamGrp
     */
    public String getParamGrp() {
        return (String)getAttributeInternal(PARAMGRP);
    }

    /**
     * Sets <code>value</code> as the attribute value for ParamGrp.
     * @param value value to set the ParamGrp
     */
    public void setParamGrp(String value) {
        setAttributeInternal(PARAMGRP, value);
    }

    /**
     * Gets the attribute value for FlgActive, using the alias name FlgActive.
     * @return the FlgActive
     */
    public String getFlgActive() {
        return (String)getAttributeInternal(FLGACTIVE);
    }

    /**
     * Sets <code>value</code> as the attribute value for FlgActive.
     * @param value value to set the FlgActive
     */
    public void setFlgActive(String value) {
        setAttributeInternal(FLGACTIVE, value);
    }

    /**
     * getAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param attrDef the attribute

     * @return the attribute value
     * @throws Exception
     */
    protected Object getAttrInvokeAccessor(int index,
                                           AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            return AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].get(this);
        }
        return super.getAttrInvokeAccessor(index, attrDef);
    }

    /**
     * setAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param value the value to assign to the attribute
     * @param attrDef the attribute

     * @throws Exception
     */
    protected void setAttrInvokeAccessor(int index, Object value,
                                         AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].put(this, value);
            return;
        }
        super.setAttrInvokeAccessor(index, value, attrDef);
    }

    /**
     * @param paramId key constituent

     * @return a Key object based on given key constituents.
     */
    public static Key createPrimaryKey(String paramId) {
        return new Key(new Object[]{paramId});
    }

    /**
     * @return the definition object for this instance class.
     */
    public static synchronized EntityDefImpl getDefinitionObject() {
        if (mDefinitionObject == null) {
            mDefinitionObject = EntityDefImpl.findDefObject("app.mkp.model.entity.notification.mail.InputParam");
        }
        return mDefinitionObject;
    }

}
